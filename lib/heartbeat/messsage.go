package heartbeat

import (
    "io"
    "encoding/json"
    "time"
    "fmt"
    "github.com/arschles/eiger/lib/util"
    "strconv"
    "log"
)

//HeartbeatMessage is an encoding.BinaryMarshaler that generates heartbeat
//messages to pass from agent to service to indicate the agent is still alive
type Message struct {
  Hostname string `json:"hostname"`
  SendTime time.Time `json:"time"`
}

func (h *Message) MarshalBinary() ([]byte, error) {
    bytes, err := json.Marshal(h)
    if err != nil {
        util.LogWarnf("(error heartbeating) %s", err)
        return []byte{}, err
    }
    sendStr := fmt.Sprintf("%d\n%s", len(bytes), string(bytes))
    return []byte(sendStr), nil
}

//parseLen reads the first N bytes until the first '\n' byte and returns
//those bytes parsed as an integer. returns 0 and the first error it finds.
func parseLen(reader io.Reader) (int, int, error) {
    //read until '\n' byte
    bytes := []byte{}
    for {
        b := make([]byte, 1)
        n, err := reader.Read(b)

        if err != nil {
            return 0, err
        } else if n <= 0 {
            return 0, fmt.Errorf("parsed length was %d", n)
        }

        if (n > 0 && b[0] == '\n') || n <= 0 {
            break
        }

        bytes = append(bytes, b[0])
    }

    return strconv.Atoi(string(bytes))
}

//DecodeHeartbeatMessage reads the (simple) wire protocol generated by
//HeartbeatMessage.MarshalBinary into a HeartbeatMessage
func DecodeMessage(reader io.Reader) (*Message, error) {
    numBytes, err := parseLen(reader)
    if err != nil {
        return nil, err
    }
    log.Printf("attempting to read %d bytes", numBytes)
    bytes := make([]byte, numBytes)
    n, err := reader.Read(bytes)
    if err != nil {
        return nil, err
    }
    if n != numBytes {
        return nil, fmt.Errorf("expected to read %d bytes, but read %d", numBytes, n)
    }
    msg := new(Message)
    err = json.Unmarshal(bytes, msg)
    if err != nil {
        return nil, err
    }
    return msg, nil
}
